// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoDrive.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoDrive::AutoDrive(): Command()
{
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoDrive::Initialize()//Intializes all the variables declared in the .h file
{
	//these variables can be edited from driver station
	speed = Robot::driveTrain->GetPower();//how fast its going
	correction = Robot::driveTrain->GetkP();//correction of the gyro
	duration = Robot::driveTrain->GetAutoTime();//length of autonomous command(time)
	delay = Robot::driveTrain->GetDelay();//delay in certain situations

	SetTimeout(duration+delay);//set duration auto drive will run

	Robot::driveTrain->ResetGyro();
	Wait(delay);
	Robot::moveBox->DownBox();

	//Robot::drivetrain->AutoGyroDrive(speed, correction, duration);

}

// Called repeatedly when this Command is scheduled to run
void AutoDrive::Execute()
{
	Robot::driveTrain->AutoGyroDrive(speed, correction);//Sets the parameters for the gyro to Auto drive
}

// Make this return true when this Command no longer needs to run execute()
bool AutoDrive::IsFinished()
{
    //return (IsTimedOut() || (Robot::drivetrain->GetDistance() < 2.15));
	//return (IsTimedOut() || Robot::driveTrain->GetDistance() < 9.000);//if timed out stop the auto drive command and go on with your life
	return (Robot::driveTrain->GetDistance() < 9.000);
}

// Called once after isFinished returns true
void AutoDrive::End()
{
	Robot::driveTrain->Stop();//stops robot
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoDrive::Interrupted()
{
	End();//safety measure in case things "go crazy"
}
