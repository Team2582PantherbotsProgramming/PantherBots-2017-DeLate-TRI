// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/AutoDrive.h"
#include "Commands/TimedDrive.h"
#include "Commands/SideAuto.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<IntakeGear> Robot::intakeGear;
std::shared_ptr<MoveIntake> Robot::moveIntake;
std::shared_ptr<MoveBox> Robot::moveBox;
std::shared_ptr<Climber> Robot::climber;
std::unique_ptr<OI> Robot::oi;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

//std::shared_ptr<VisionManager> Robot::visionManager;
//std::shared_ptr<VisionManager> Robot::visionManager =
//		std::make_shared<VisionManager>();

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    intakeGear.reset(new IntakeGear());
    moveIntake.reset(new MoveIntake());
    moveBox.reset(new MoveBox());
    climber.reset(new Climber());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    //visionManager.reset(new VisionManager());

	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand.reset(new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	prefs = frc::Preferences::GetInstance();

	if(Robot::intakeGear->LaserInfo() == true)
	    {
	    	frc::SmartDashboard::PutString("Gear State:", "Gear");
	   	}
	else
	   	{
	   		frc::SmartDashboard::PutString("Gear State:", "No Gear");
	   	}

	frc::SmartDashboard::PutNumber("kP", Robot::driveTrain->GetkP());
	frc::SmartDashboard::PutNumber("AutoTime", Robot::driveTrain->GetAutoTime());
	frc::SmartDashboard::PutNumber("GyroPower", Robot::driveTrain->GetPower());
	frc::SmartDashboard::PutNumber("Turn Angle", Robot::driveTrain->TurnAngle());
	frc::SmartDashboard::PutNumber("GyroAngle", Robot::driveTrain->DisplayAngle());
	frc::SmartDashboard::PutNumber("AutoDelay", Robot::driveTrain->GetDelay());
	frc::SmartDashboard::PutNumber("Ultrasonic", Robot::driveTrain->GetDistance());
	frc::SmartDashboard::PutNumber("ClimberPower", Robot::climber->ClimberPower());
	frc::SmartDashboard::PutString("Ship is", Robot::driveTrain->GetDirection());
	frc::SmartDashboard::PutNumber("UltraVal", Robot::driveTrain->GetUltraVal());
	//Robot::visionManager->DashboardOutput(false);
	//Robot::visionManager.get()->Initialize(prefs);
	//Robot::visionManager.get()->StartProc();

	autoCommand.reset(new AutonomousCommand());

	autoModes = frc::SendableChooser<frc::Command*>();
	autoModes.AddObject("Nothing Auto", new AutonomousCommand());
	autoModes.AddObject("Timed Auto", new TimedDrive());
	autoModes.AddObject("Side Auto", new SideAuto());
	autoModes.AddDefault("Drive Forward Gyro", new AutoDrive());


	frc::SmartDashboard::PutData("Autonomous Modes", &autoModes);

	CameraServer::GetInstance()->StartAutomaticCapture();

  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
	frc::SmartDashboard::PutNumber("kP", Robot::driveTrain->GetkP());
	frc::SmartDashboard::PutNumber("AutoTime", Robot::driveTrain->GetAutoTime());
	frc::SmartDashboard::PutNumber("GyroPower", Robot::driveTrain->GetPower());
	frc::SmartDashboard::PutNumber("Turn Angle", Robot::driveTrain->TurnAngle());
	frc::SmartDashboard::PutNumber("GyroAngle", Robot::driveTrain->DisplayAngle());
	frc::SmartDashboard::PutNumber("AutoDelay", Robot::driveTrain->GetDelay());
	frc::SmartDashboard::PutNumber("Ultrasonic", Robot::driveTrain->GetDistance());
	frc::SmartDashboard::PutNumber("ClimberPower", Robot::climber->ClimberPower());
	frc::SmartDashboard::PutString("Ship is", Robot::driveTrain->GetDirection());
	frc::SmartDashboard::PutNumber("UltraVal", Robot::driveTrain->GetUltraVal());
		//Robot::visionManager->DashboardOutput(false);
}

void Robot::AutonomousInit() {
	autonomousCommand.reset((Command*) autoModes.GetSelected());

	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	frc::Scheduler::GetInstance()->Run();
	frc::SmartDashboard::PutNumber("kP", Robot::driveTrain->GetkP());
	frc::SmartDashboard::PutNumber("AutoTime", Robot::driveTrain->GetAutoTime());
	frc::SmartDashboard::PutNumber("GyroPower", Robot::driveTrain->GetPower());
	frc::SmartDashboard::PutNumber("Turn Angle", Robot::driveTrain->TurnAngle());
	frc::SmartDashboard::PutNumber("GyroAngle", Robot::driveTrain->DisplayAngle());
	frc::SmartDashboard::PutNumber("AutoDelay", Robot::driveTrain->GetDelay());
	frc::SmartDashboard::PutNumber("Ultrasonic", Robot::driveTrain->GetDistance());
	frc::SmartDashboard::PutNumber("ClimberPower", Robot::climber->ClimberPower());
	frc::SmartDashboard::PutString("Ship is", Robot::driveTrain->GetDirection());
	frc::SmartDashboard::PutNumber("UltraVal", Robot::driveTrain->GetUltraVal());
		//Robot::visionManager->DashboardOutput(false);
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	frc::Scheduler::GetInstance()->Run();
	frc::SmartDashboard::PutNumber("kP", Robot::driveTrain->GetkP());
	frc::SmartDashboard::PutNumber("AutoTime", Robot::driveTrain->GetAutoTime());
	frc::SmartDashboard::PutNumber("GyroPower", Robot::driveTrain->GetPower());
	frc::SmartDashboard::PutNumber("TurnAngle", Robot::driveTrain->TurnAngle());
	frc::SmartDashboard::PutNumber("GyroAngle", Robot::driveTrain->DisplayAngle());
	frc::SmartDashboard::PutNumber("AutoDelay", Robot::driveTrain->GetDelay());
	frc::SmartDashboard::PutNumber("Ultrasonic", Robot::driveTrain->GetDistance());
	frc::SmartDashboard::PutNumber("ClimberPower", Robot::climber->ClimberPower());
	frc::SmartDashboard::PutString("Ship is", Robot::driveTrain->GetDirection());
		//Robot::visionManager->DashboardOutput(false);
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

