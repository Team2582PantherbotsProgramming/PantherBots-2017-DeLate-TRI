// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class DriveTrain: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<SpeedController> leftFront;
	std::shared_ptr<SpeedController> leftBack;
	std::shared_ptr<SpeedController> rightFront;
	std::shared_ptr<SpeedController> rightBack;
	//std::shared_ptr<RobotDrive> robotDrive;
	std::shared_ptr<Compressor> compressor;
	std::shared_ptr<AnalogInput> ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	double drive_x;
	double drive_y;

	std::shared_ptr<ADXRS450_Gyro> gyro;
public:
	DriveTrain();
	void InitDefaultCommand();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	//for DriveTrain
	void JoystickDrive(std::shared_ptr<frc::Joystick>);
	void Stop();

	//Ultrasonic functions
	double GetDistance();

	//Gyro functions
	void AutoGyroDrive(double, double);
	double GetPower();
	double GetkP();
	double GetAutoTime();
	double GetDelay();
	double TurnAngle();
	std::string GetDirection();
	double DisplayAngle();
	void ResetGyro();
	bool GetPos();
	void TurnRight(std::string, double);
	void TurnLeft(std::string, double);
	void TurnFun(std::string, double);
	void Backwards(double, double);

	//Gyro variables
	double power;
	double kP;
	double AutoTime;
	double Delay;
	bool pos;


	//turning variables
	double ultraVal;
	std::string ShipPos;
	double turnAngle;

	double GetUltraVal();



	std::shared_ptr<RobotDrive> robotDrive;

};

#endif
