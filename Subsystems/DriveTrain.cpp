// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/JoyDrive.h"

#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftFront = RobotMap::driveTrainLeftFront;
    leftBack = RobotMap::driveTrainLeftBack;
    rightFront = RobotMap::driveTrainRightFront;
    rightBack = RobotMap::driveTrainRightBack;
    robotDrive = RobotMap::driveTrainRobotDrive;
    compressor = RobotMap::driveTrainCompressor;
    ultrasonic = RobotMap::driveTrainUltrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //Gyro
    gyro = RobotMap::driveTrainGyro;

    //for DriveTrain
    drive_x = 0;
    drive_y = 0;

    //variables for Gyro
    power = -.350;
    kP = .02;
    AutoTime = 2.150;
    Delay = .000;



    turnAngle = -60;
    pos = false;
    ShipPos = "R";
    ultraVal = 80.000;

}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new JoyDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


void DriveTrain::JoystickDrive(std::shared_ptr<frc::Joystick> joy)
{
	drive_x = joy->GetX() /* * .75*/;
	drive_y = joy->GetY() /* * .75*/;
	leftFront->Set(pow(drive_x, 3) + pow(-drive_y, 3));
	leftBack->Set(pow(drive_x, 3) + pow(-drive_y, 3));
	rightFront->Set(pow(drive_x, 3) + pow(drive_y, 3));
	rightBack->Set(pow(drive_x, 3) + pow(drive_y, 3));
}

void DriveTrain::Stop()
{
	robotDrive->Drive(0,0);
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

double DriveTrain::GetPower()
{
	power = frc::SmartDashboard::GetNumber("GyroPower", power);
	return power;
}

double DriveTrain::GetkP()
{
	kP = frc::SmartDashboard::GetNumber("kP", kP);
	return kP;
}

double DriveTrain::GetDelay()
{
	Delay = frc::SmartDashboard::GetNumber("AutoDelay", Delay);
	return Delay;
}

std::string DriveTrain::GetDirection()
{
	ShipPos = frc::SmartDashboard::GetString("Shis is", ShipPos);
	return ShipPos;
}

double DriveTrain::TurnAngle()
{
	turnAngle = frc::SmartDashboard::GetNumber("Turn Angle", turnAngle);
	return turnAngle;
}

double DriveTrain::DisplayAngle()
{
	return gyro->GetAngle();
}

void DriveTrain::ResetGyro()
{
	gyro->Reset();
}

double DriveTrain::GetDistance()
{
	return ultrasonic->GetAverageVoltage() * 9.766 * 12;
}

bool DriveTrain::GetPos()
{
	return pos;
}

double DriveTrain::GetAutoTime()
{
	AutoTime = frc::SmartDashboard::GetNumber("AutoTime", AutoTime);
	return AutoTime;
}

void DriveTrain::AutoGyroDrive(double Speed, double Correction)
{
	double angle = gyro->GetAngle();
	double idealAngle = 0;
	robotDrive->Drive(Speed, (idealAngle - angle) * -Correction);
}

void DriveTrain::TurnFun(std::string Direction, double TurnAngle)
{
	if(Direction == "L")
	{
		robotDrive->TankDrive(-.3,.3);
		pos = true;
	}
	else if(Direction == "R")
	{
		//robotDrive->TankDrive(.6,-.6);

		double angle = gyro->GetAngle();
		if(TurnAngle > 0)
		{
			double angle = gyro->GetAngle();
			if(angle - TurnAngle >= 0)
			{
				robotDrive->TankDrive(0.000, 0.000);
				pos = true;
			}
			else
			{
				robotDrive->TankDrive(.6, -.6);
				pos = false;
			}
		}
		else if (TurnAngle < 0)
		{
			double angle = gyro->GetAngle();
			if(TurnAngle - angle >= 0)
			{
				robotDrive->TankDrive(0.000, 0.000);
				pos = true;
			}
			else
			{
				robotDrive->TankDrive(-.6, .6);
				pos = false;
			}
		}
	}
}

double DriveTrain::GetUltraVal()
{
	ultraVal = frc::SmartDashboard::GetNumber("UltraVal", ultraVal);
	return ultraVal;
}

void DriveTrain::Backwards(double Speed, double Correction)
{
	double angle = gyro->GetAngle();
	double idealAngle = 0;
	robotDrive->Drive(-Speed, (angle - idealAngle) * Correction);
}
